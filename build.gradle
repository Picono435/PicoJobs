import org.apache.tools.ant.filters.*

buildscript {
    dependencies {
        classpath fileTree(dir: './gradle/',
            includes: ['versioning.jar'])
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'io.github.slimjar' version '1.3.0'
    id 'java'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '2.14.0'
}

group = 'com.gmail.picono435'
description = 'The best jobs plugin ever! You can customize every single thing on it.'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

versioning {
   releaseMode = { nextTag, lastTag, currentTag, extension ->
       "1.0-beta-3c"
   } as Object
}

if (System.getenv("STABLE_BUILD") != null) {
    if (System.getenv("STABLE_BUILD") == '1') {
        version versioning.info.build + "-DEV"
    } else {
        version versioning.info.display
    }
} else {
    version versioning.info.build + "-DEV"
}

repositories {
    mavenCentral()

    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }

    maven {
        url = 'https://repo.citizensnpcs.co/'
    }

    maven {
        url = 'https://jitpack.io'
    }

    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }

    maven {
        url = 'https://repo.codemc.org/repository/maven-public'
    }

    maven {
        url = 'https://repo.rosewooddev.io/repository/public/'
    }

    maven {
        url = 'https://repo.vshnv.tech/'
    }

    mavenLocal()
}

dependencies {
    // Spigot
    compileOnly 'org.spigotmc:spigot-api:1.17.1-R0.1-SNAPSHOT'
    // Storage Methods
    slim 'org.mongodb:mongodb-driver-sync:4.3.1'
    slim 'com.zaxxer:HikariCP:4.0.3'
    slim 'com.h2database:h2:1.4.200'
    slim 'org.xerial:sqlite-jdbc:3.36.0.1'
    slim 'org.mariadb.jdbc:mariadb-java-client:2.7.4'
    slim 'mysql:mysql-connector-java:8.0.26'
    implementation 'org.spongepowered:configurate-core:4.1.2'
    implementation 'org.spongepowered:configurate-gson:4.1.1'
    implementation 'org.spongepowered:configurate-yaml:4.1.2'
    implementation 'org.spongepowered:configurate-hocon:4.1.2'
    // Plugins API
    compileOnly('me.clip:placeholderapi:2.10.10') { transitive = false }
    compileOnly('com.github.MilkBowl:VaultAPI:1.7.1') { transitive = false }
    compileOnly('org.black_ixx:playerpoints:3.0.3') { transitive = false }
    compileOnly('com.github.Realizedd:TokenManager:3.2.4') { transitive = false }
    // Other libraries
    implementation 'com.github.mkremins:fanciful:18dc039f5b'
    slim 'com.fasterxml.jackson.core:jackson-databind:2.12.4'
    slim 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.4'
    implementation 'org.apache.maven:maven-artifact:3.8.1'
    implementation 'org.bstats:bstats-bukkit:2.2.1'
    slim 'org.slf4j:slf4j-simple:1.7.32'
    slim 'org.slf4j:slf4j-api:1.7.32'
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.16:1.5.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    testCompileOnly 'org.spigotmc:spigot-api:1.17.1-R0.1-SNAPSHOT'
    testCompileOnly('me.clip:placeholderapi:2.10.10') { transitive = false }
    testCompileOnly('com.github.MilkBowl:VaultAPI:1.7') { transitive = false }
    testCompileOnly('org.black_ixx:playerpoints:3.0.3') { transitive = false }
    testCompileOnly('com.github.Realizedd:TokenManager:3.2.4') { transitive = false }
    implementation slimjar("1.2.5")
}

test {
    useJUnitPlatform()
}

shadowJar {
   relocate 'org.bstats', 'com.gmail.picono435.picojobs'
   archiveClassifier = ''
}

processResources {
    filter ReplaceTokens, tokens: [
            "name": project.property("name"),
            "version": project.property("version"),
            "description": project.property("description")
    ]
}

rootProject.tasks.named("processResources") {
    duplicatesStrategy = 'include'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}