architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common-mod").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        url "https://maven.nucleoid.xyz/"
        name "Nucleoid"
        content {
            includeGroup 'eu.pb4'
        }
    }

    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
        name "Sonatype OSS"
        content {
            includeGroup 'me.lucko'
        }
    }
}

dependencies {
    implementation(project(":common"))

    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    shadowCommon(modImplementation("eu.pb4:placeholder-api:2.1.1+1.20"))
    shadowCommon(modImplementation("me.lucko:fabric-permissions-api:0.2-SNAPSHOT")) { transitive = false }

    common(project(path: ":common-mod", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common-mod", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    /*inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }*/
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common-mod").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
