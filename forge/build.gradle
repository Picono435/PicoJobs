architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common-mod").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "picojobs.mixins.json"
        mixinConfig "picojobs-forge.mixins.json"
    }

    mods {
        main {
            sourceSet project(':common').sourceSets.main
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
    forgeRuntimeLibrary { extendsFrom project(':common').configurations.transitiveCommon }
}

dependencies {
    shadowCommon(implementation(project(":common")))

    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common-mod", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common-mod", configuration: "transformProductionForge")) { transitive = false }

    compileOnly('dev.racci.slimjar:slimjar:1.6.1')
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")

    dependencies {
        exclude(dependency('org.slf4j:slf4j-api:2.0.7'))
    }

    relocate 'org.spongepowered.configurate', 'com.gmail.picono435.picojobs.libs.org.spongepowered.configurate'
    relocate 'com.google.common', 'com.gmail.picono435.picojobs.libs.com.google.common'
    relocate 'com.google.errorprone', 'com.gmail.picono435.picojobs.libs.com.google.errorprone'
    relocate 'com.google.gson', 'com.gmail.picono435.picojobs.libs.com.google.gson'
    relocate 'com.google.j2objc', 'com.gmail.picono435.picojobs.libs.com.google.j2objc'
    relocate 'com.google.thirdparty', 'com.gmail.picono435.picojobs.libs.com.google.thirdparty'
    relocate 'com.typesafe.config', 'com.gmail.picono435.picojobs.libs.com.typesafe.config'
    relocate 'io.github.slimjar', 'com.gmail.picono435.picojobs.libs.io.github.slimjar'
    relocate 'io.leangen.geantyref', 'com.gmail.picono435.picojobs.libs.io.github.geantyref'
    relocate 'javax.annotation', 'com.gmail.picono435.picojobs.libs.javax.annotation'
    relocate 'org.apache.commons', 'com.gmail.picono435.picojobs.libs.org.apache.commons'
    relocate 'org.apache.maven', 'com.gmail.picono435.picojobs.libs.org.apache.maven'
    relocate 'org.checkerframework', 'com.gmail.picono435.picojobs.libs.org.checkerframework'
    relocate 'org.codehaus.plexus', 'com.gmail.picono435.picojobs.libs.org.codehaus.plexus'
    relocate 'org.yaml.snakeyaml', 'com.gmail.picono435.picojobs.libs.org.yaml.snakeyaml'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common-mod").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}