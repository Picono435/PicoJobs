architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common-mod").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "picojobs.mixins.json"
    }

    mods {
        main {
            sourceSet project(':common').sourceSets.main
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forgeRuntimeLibrary(implementation(project(":common")))

    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common-mod", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common-mod", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")

    relocate 'org', 'com.gmail.picono435.picojobs.libs.org'
    relocate('com', 'com.gmail.picono435.picojobs.libs.com') {
        exclude '%regex[com.gmail.picono435.picojobs.*]'
    }
    relocate 'google', 'com.gmail.picono435.picojobs.libs.google'
    relocate 'javax', 'com.gmail.picono435.picojobs.libs.javax'
    relocate 'waffle', 'com.gmail.picono435.picojobs.libs.javax'
    relocate 'io', 'com.gmail.picono435.picojobs.libs.io'
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common-mod").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}